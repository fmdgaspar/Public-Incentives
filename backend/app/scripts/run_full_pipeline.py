#!/usr/bin/env python3
"""
Pipeline completo para processamento de incentivos.

Este script executa todo o pipeline:
1. Scraping das p√°ginas do Fundo Ambiental
2. Extra√ß√£o determin√≠stica (datas, or√ßamentos)
3. Carregamento para BD
4. Enhancement com LLM (HTML das p√°ginas fonte)
5. Processamento de documentos PDF
6. Gera√ß√£o de embeddings
7. Estat√≠sticas finais

Usage:
    python -m backend.app.scripts.run_full_pipeline [--limit N] [--skip-scraping] [--skip-enhancement]
"""

import sys
import argparse
from pathlib import Path
from typing import Optional

import structlog
from dotenv import load_dotenv

# Add project root to sys.path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

load_dotenv()

from backend.app.db.session import SessionLocal
from backend.app.models.incentive import Incentive

logger = structlog.get_logger()


def run_scraping(limit: Optional[int] = None) -> bool:
    """Executa o scraping das p√°ginas."""
    print("\nüîÑ Fase 1: Scraping das p√°ginas do Fundo Ambiental...")
    
    try:
        import subprocess
        
        cmd = ["python", "-m", "scraper.run"]
        if limit:
            cmd.extend(["--limit", str(limit)])
        
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path(__file__).parent.parent.parent.parent)
        
        if result.returncode == 0:
            print("‚úÖ Scraping conclu√≠do com sucesso!")
            return True
        else:
            print(f"‚ùå Erro no scraping: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar scraping: {e}")
        return False


def run_deterministic_extraction() -> bool:
    """Executa a extra√ß√£o determin√≠stica (j√° integrada no scraper)."""
    print("\nüîÑ Fase 2: Extra√ß√£o determin√≠stica (datas, or√ßamentos)...")
    print("‚úÖ Extra√ß√£o determin√≠stica j√° integrada no scraper!")
    return True


def run_load_to_database() -> bool:
    """Carrega os incentivos para a base de dados."""
    print("\nüîÑ Fase 3: Carregamento para base de dados...")
    
    try:
        import subprocess
        
        result = subprocess.run(
            ["python", "-m", "backend.app.db.load_incentives"],
            capture_output=True, text=True,
            cwd=Path(__file__).parent.parent.parent.parent
        )
        
        if result.returncode == 0:
            print("‚úÖ Carregamento para BD conclu√≠do!")
            return True
        else:
            print(f"‚ùå Erro no carregamento: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao carregar para BD: {e}")
        return False


def run_llm_enhancement() -> bool:
    """Executa o enhancement com LLM usando HTML das p√°ginas fonte."""
    print("\nüîÑ Fase 4: Enhancement com LLM (HTML das p√°ginas fonte)...")
    
    try:
        import subprocess
        
        result = subprocess.run(
            ["python", "-m", "backend.app.scripts.enhance_with_source_html"],
            capture_output=True, text=True,
            cwd=Path(__file__).parent.parent.parent.parent
        )
        
        if result.returncode == 0:
            print("‚úÖ Enhancement com LLM conclu√≠do!")
            return True
        else:
            print(f"‚ùå Erro no enhancement: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no enhancement: {e}")
        return False


def run_pdf_processing() -> bool:
    """Processa documentos PDF para incentivos com campos em falta."""
    print("\nüîÑ Fase 5: Processamento de documentos PDF...")
    
    try:
        from backend.app.scripts.extract_ai_descriptions import extract_ai_descriptions
        
        with SessionLocal() as db:
            stats = extract_ai_descriptions(db, force=True)
            
            print(f"‚úÖ Processamento de PDFs conclu√≠do!")
            print(f"   Total processados: {stats['total']}")
            print(f"   Sucessos: {stats['success']}")
            print(f"   Falhas: {stats['failed']}")
            print(f"   Custo: ‚Ç¨{stats['total_cost_eur']:.4f}")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro no processamento de PDFs: {e}")
        return False


def run_embeddings_generation() -> bool:
    """Gera embeddings para todos os incentivos."""
    print("\nüîÑ Fase 6: Gera√ß√£o de embeddings...")
    
    try:
        from backend.app.scripts.extract_ai_descriptions import generate_embeddings
        
        with SessionLocal() as db:
            stats = generate_embeddings(db, force=True)
            
            print(f"‚úÖ Gera√ß√£o de embeddings conclu√≠da!")
            print(f"   Total processados: {stats['total']}")
            print(f"   Sucessos: {stats['success']}")
            print(f"   Falhas: {stats['failed']}")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de embeddings: {e}")
        return False


def show_final_statistics():
    """Mostra estat√≠sticas finais."""
    print("\nüìä Estat√≠sticas Finais:")
    
    try:
        with SessionLocal() as db:
            total = db.query(Incentive).count()
            pub_dates = db.query(Incentive).filter(Incentive.publication_date.isnot(None)).count()
            start_dates = db.query(Incentive).filter(Incentive.start_date.isnot(None)).count()
            end_dates = db.query(Incentive).filter(Incentive.end_date.isnot(None)).count()
            budgets = db.query(Incentive).filter(Incentive.total_budget.isnot(None)).count()
            ai_descriptions = db.query(Incentive).filter(Incentive.ai_description.isnot(None)).count()
            
            print(f"   Total de incentivos: {total}")
            print(f"   Publication Date: {pub_dates}/{total} ({pub_dates*100//total}%)")
            print(f"   Start Date: {start_dates}/{total} ({start_dates*100//total}%)")
            print(f"   End Date: {end_dates}/{total} ({end_dates*100//total}%)")
            print(f"   Total Budget: {budgets}/{total} ({budgets*100//total}%)")
            print(f"   AI Descriptions: {ai_descriptions}/{total} ({ai_descriptions*100//total}%)")
            
    except Exception as e:
        print(f"‚ùå Erro ao obter estat√≠sticas: {e}")


def main():
    """Fun√ß√£o principal do pipeline."""
    parser = argparse.ArgumentParser(description="Pipeline completo de processamento de incentivos")
    parser.add_argument("--limit", type=int, help="Limitar n√∫mero de incentivos a processar")
    parser.add_argument("--skip-scraping", action="store_true", help="Pular fase de scraping")
    parser.add_argument("--skip-enhancement", action="store_true", help="Pular fase de enhancement com LLM")
    parser.add_argument("--skip-embeddings", action="store_true", help="Pular gera√ß√£o de embeddings")
    
    args = parser.parse_args()
    
    print("üöÄ Iniciando Pipeline Completo de Processamento de Incentivos")
    print("=" * 60)
    
    success = True
    
    # Fase 1: Scraping
    if not args.skip_scraping:
        success = run_scraping(args.limit)
        if not success:
            print("‚ùå Pipeline interrompido na fase de scraping")
            return
    
    # Fase 2: Extra√ß√£o determin√≠stica (j√° integrada)
    success = run_deterministic_extraction()
    if not success:
        print("‚ùå Pipeline interrompido na fase de extra√ß√£o determin√≠stica")
        return
    
    # Fase 3: Carregamento para BD
    success = run_load_to_database()
    if not success:
        print("‚ùå Pipeline interrompido no carregamento para BD")
        return
    
    # Fase 4: Enhancement com LLM
    if not args.skip_enhancement:
        success = run_llm_enhancement()
        if not success:
            print("‚ùå Pipeline interrompido no enhancement com LLM")
            return
    
    # Fase 5: Processamento de documentos PDF
    success = run_pdf_processing()
    if not success:
        print("‚ùå Pipeline interrompido no processamento de PDFs")
        return
    
    # Fase 6: Gera√ß√£o de embeddings
    if not args.skip_embeddings:
        success = run_embeddings_generation()
        if not success:
            print("‚ùå Pipeline interrompido na gera√ß√£o de embeddings")
            return
    
    # Estat√≠sticas finais
    show_final_statistics()
    
    print("\nüéâ Pipeline completo executado com sucesso!")
    print("=" * 60)


if __name__ == "__main__":
    main()
